"""
Here we compute the LDOS in real space as the Pan paper, to test if I'm doing the right calculation.
"""
import sys,os
import numpy as np
import scipy
from pathlib import Path
import matplotlib.pyplot as plt
from tqdm import tqdm
import functions_ldos as fsl

save_data = False
plot_ldos = True
save_plot_ldos = False
show_plot_ldos = True

V = 0.005   #eV
psi = 0.5*np.pi
Vm = V*np.exp(1j*psi)
theta = 3/180*np.pi
w = 0.02    #eV
kPts = 6
kPts2 = 100
l1 = int(kPts2/(3+np.sqrt(3)))   #length of k'+ -> g (same as  g -> k- and k- -> k+)
l2 = int(l1*np.sqrt(3))
kPts2 = 3*l1+l2
a_0 = 3.28  #A
a_M = a_0/2/np.sin(theta/2)
k_p = np.array([-np.sqrt(3)/2,-1/2])*4*np.pi/3/a_M
k_m = np.array([-np.sqrt(3)/2,1/2])*4*np.pi/3/a_M

en_coeff = 7.62/0.45    #eV*A^2
Ng = 7

bs = [ np.zeros(2), np.array([1,0])*4*np.pi/np.sqrt(3)/a_M, ]
for i in range(1,6):
    bs.append( fsl.R_z(np.pi/3*i)@bs[1] )

def H(k):
    """
    Matrix Hamiltonian.
    k is 2-D.
    """
    mat = np.zeros((2*Ng,2*Ng),dtype=complex)
    #Moire
    mat[0,1] = mat[0,3] = mat[0,5] = Vm
    mat[0,2] = mat[0,4] = mat[0,6] = Vm.conj()
    mat[1,2] = mat[1,6] = mat[3,4] = mat[5,6] = Vm
    mat[2,3] = mat[4,5] = Vm.conj()
    mat += mat.T.conj()
    #Interlayer
    mat[:Ng,Ng:] = np.absolute(mat[:Ng,:Ng])/V*w       #all to all
#    mat[0,Ng+2] = mat[0,Ng+3] = mat[1,Ng+2] = mat[1,Ng+6] = mat[0,Ng+5] = mat[0,Ng+6] = mat[3,Ng+4] = mat[4,Ng+5] = w
#    mat[:Ng,Ng:] += mat[:Ng,Ng:].T
    for i in range(Ng):
        mat[i,Ng+i] = w
    #Other layer
    mat[Ng:,Ng:] = mat[:Ng,:Ng].conj()
    mat[Ng:,:Ng] = mat[:Ng,Ng:].T
    #Dispersion
    for i in range(Ng):
        mat[i,i] = -en_coeff/2*np.linalg.norm(k+bs[i]-k_p)**2
        mat[i+Ng,i+Ng] = -en_coeff/2*np.linalg.norm(k+bs[i]-k_m)**2
    return mat

args = ('pan',V,psi,theta,w,kPts,kPts2)
data_fn = fsl.get_fn(*args)

kFlat = fsl.compute_kList(kPts,bs[1:3])         #for sum over mini-BZ
kBands = fsl.compute_kBands(l1,l2,bs[1:3])      #for plotting the bands
if not Path(data_fn).is_file():
    evals = np.zeros((kPts**2,Ng*2))
    evals_b = np.zeros((kPts2,Ng*2))
    evecs = np.zeros((kPts**2,Ng*2,Ng*2),dtype=complex)
    for i in tqdm(range(kPts**2)):
        K_i = kFlat[i]
        H_tot = H(K_i)
        evals[i],evecs[i] = scipy.linalg.eigh(H_tot,check_finite=False,overwrite_a=True)           #Diagonalize to get eigenvalues and eigenvectors
    for i in range(kPts2):
        K_i = kBands[i]
        H_tot = H(K_i)
        evals_b[i] = scipy.linalg.eigvalsh(H_tot,check_finite=False,overwrite_a=True)           #Diagonalize to get eigenvalues and eigenvectors
    if save_data:
        np.savez(data_fn,evals=evals,evecs=evecs,evals_b=evals_b)
else:
    print("Already computed")
    evals = np.load(data_fn)['evals']
    evals_b = np.load(data_fn)['evals_b']
    evecs = np.load(data_fn)['evecs']

if 1:
    if 0:#Lattice
        fig = plt.figure()
        ax = fig.add_subplot()
        for i in range(1,7):
            ax.plot([0,bs[i][0]],[0,bs[i][1]],lw=2,label=str(i))
        ax.scatter(kBands[:,0],kBands[:,1],color='r')
        ax.legend()
        plt.show()
    #
    fig = plt.figure()
    ax = fig.add_subplot()
    kMod = np.arange(kPts2)
    for n in range(Ng*2):
        ax.plot(kMod,evals_b[:,n],color='k')
    ax.axvline(l1)
    ax.axvline(2*l1)
    ax.axvline(3*l1)
    ax.set_ylim(-0.12,0.05)
    ax.set_xlim(0,kPts2-1)
    plt.show()
    exit()

rList = fsl.compute_rList(rPts,fsl.get_moire(bs[1:3]))

eList = np.linspace(-2,2,200)

def lorentzian(E, E0, eta=0.02):
    return eta / (np.pi * ((E - E0)**2 + eta**2))

def gaussianOrbital(r, center=np.zeros(2), sigma=5):
    return np.exp(-np.linalg.norm(r - center, axis=-1)**2 / (2 * sigma**2))


LDOS = np.zeros((rPts,len(eList)))
Gs = [np.zeros(2),]
for i in range(6):
    Gs.append(cfs.R_z(np.pi/3*i)@G_M[0])

orbital = 1#gaussianOrbital(rList)
for ik in tqdm(range(kPts**2), desc="Momentum iteration"):
    kx,ky = kFlat[ik]
    evals_k = evals[ik]
    evecs_k = evecs[ik]
    #Vectorized calculation
    kGs = Gs + kFlat[ik]        #nCells,2
    phases = np.exp(1j * rList @ kGs.T)[np.newaxis,np.newaxis,:,:]     #1,1,nR,nCells
    alpha = np.arange(44)[:, np.newaxis]  # (44, 1)
    ig = np.arange(nCells)[np.newaxis, :]  # (1, nCells)
    ind = (alpha % 22) + ig * 22 + nCells * 22 * (alpha // 22)  #44,nCells
    coeffs_all = np.take(evecs_k, ind, axis=0).transpose(2, 0, 1)       #nBands, 44, nCells
    coeffs_all = coeffs_all[:,:,np.newaxis,:]  # (nBands, 1, 44, nCells)
    #
    psi_alpha = np.sum(phases * coeffs_all, axis=-1) * orbital  # (nBands, 44, nR)
    psi_r_all = np.sum(np.abs(psi_alpha)**2, axis=1)  # (nBands, nR)
    lorentz_matrix = lorentzian(eList[None, :], evals_k[:, None])  # (nBands, nE)
    LDOS = psi_r_all.T @ lorentz_matrix  # (nR, nE)


LDOS /= kPts**2

if plot_ldos:
    fig = plt.figure(figsize=(20,20))
#    ax = fig.add_subplot(121)
#    ax.plot()

    ax = fig.add_subplot(111)
    X,Y = np.meshgrid(np.linalg.norm(rList,axis=1),eList)
    mesh = ax.pcolormesh(X,Y,LDOS.T,cmap='viridis')
    fig.colorbar(mesh,ax=ax)

    ax.set_xlabel('position')
    ax.set_ylabel('energy')
    title = "V_g="+"{:.5f}".format(Vg)+"_phase="+"{:.3f}".format(phiG)
    ax.set_title(title)

    if save_plot_ldos:
        plt.savefig("Figures/"+title+'.png')
    if show_plot_ldos:
        plt.show()
    plt.close()





















